#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include <Windows.h>

struct node
{
	int cust_num;
	char cust_name[20];
	char gender[7];
	char cust_address1[30];
	char cust_address2[30];
	char cust_address3[30];
	char order_descp[40];
	struct node *next;
	struct node *prev;
}*current, *previous, *temp, *start, *temp2;

int total = 0;

void custNumInput();
void getValidNum();
void custNumInput();
void custNameInput();
void custGenInput();
void printNameList();
void create();
void insert();
void insertbehind();
void display();
void displaybehind();
void insertmid();
void deleterec();
void editrec();

void main()
{
	int numChoice;
	char str[9];

	temp = NULL;
	do
	{
		system("cls");
		printf("\n%d records currently in the system.", total); //check total rec
		printf("\n1. Add from beginning (add)\n"
			"2. Add to End (adde)\n"
			"3. Add to specified location (addsp)\n"
			"4. Print from beginning (pb)\n"
			"5. Print from end (pe) \n"
			"6. Delete (del)\n"
			"7. Edit (ed)\n"
			"8. Exit (ex)\n"
			"\nMenu Choice: "
			);
		scanf("%s", str); fflush(stdin);

		system("cls");

		if (strcmp(str, "add") == 0)
		{
			insert();
		}
		else if (strcmp(str, "adde") == 0)
		{
			insertbehind();
		}
		else if (strcmp(str, "addsp") == 0)
		{
			insertmid();
		}
		else if (strcmp(str, "pb") == 0)
		{
			display();
		}
		else if (strcmp(str, "pe") == 0)
		{
			displaybehind();
		}
		else if (strcmp(str, "del") == 0)
		{
			deleterec();
		}
		else if (strcmp(str, "ed") == 0)
		{
			editrec();
		}
		else if (strcmp(str, "ex") == 0)
		{
			printf("Exiting...");
			Sleep(600);
			return;
		}
		else
		{
			printf("\nInvalid Input. Press any key to return to main menu.");
			getch();
		}
	} while (strcmp(str, "ex") != 0);

}
void create()
{
	int n;
	temp = (struct node *)malloc(sizeof(struct node));
	temp->next = NULL;
	temp->prev = NULL;
	custNumInput();
	custNameInput();
	custGenInput();

	printf("\n Address Line 1: ");
	gets(temp->cust_address1);
	fflush(stdin);

	printf("\n Address Line 2: ");
	gets(temp->cust_address2);
	fflush(stdin);

	printf("\n Address Line 3: ");
	gets(temp->cust_address3);
	fflush(stdin);

	printf("\n Description: ");
	gets(temp->order_descp);
	fflush(stdin);

	total++;
}
void insert()
{
	char choice;
	do
	{
		printf("Inserting to beginning of list:\n\n");
		if (temp == NULL)
		{
			create();
			start = temp;
			current = start;
		}
		else
		{
			create();
			start->prev = temp;
			temp->next = start;
			start = temp;

		}
		printf("\nDo you wish to add more? [Y/N]");
		scanf("%c", &choice); fflush(stdin);
		system("cls");
	} while (choice == 'Y' || choice == 'y');

}
void insertbehind()
{
	char choice;
	do
	{
		printf("Inserting to end of list:\n\n");
		if (temp == NULL)
		{
			create();
			start = temp;
			current = start;
		}
		else
		{
			create();
			current->next = temp;
			temp->prev = current;
			current = temp;
		}
		printf("\nDo you wish to add more? [Y/N]");
		scanf("%c", &choice); fflush(stdin);
		system("cls");
	} while (choice == 'Y' || choice == 'y');
}
void display()
{

	temp2 = start;
	if (temp2 == NULL)
	{
		printf("List empty to display \n");
		return;
	}
	while (temp2 != NULL)
	{
		printf("\nCustomer number: %d\n"
			"Name: %s\n"
			"Gender: %s\n"
			"Address L1: %s\n"
			"Address L2: %s\n"
			"Address L3: %s\n"
			"Description: %s\n"

			, temp2->cust_num, temp2->cust_name, temp2->gender, temp2->cust_address1, temp2->cust_address2, temp2->cust_address3, temp2->order_descp);


		temp2 = temp2->next;

	}

	printf("press any key to continue...");
	getch();

}
void displaybehind()
{
	temp2 = current;
	if (temp2 == NULL)
	{
		printf("List empty to display \n");
		return;
	}
	while (temp2 != NULL)
	{
		printf("\nCustomer number: %d\n"
			"Name: %s\n"
			"Gender: %s\n"
			"Address L1: %s\n"
			"Address L2: %s\n"
			"Address L3: %s\n"
			"Description: %s\n"
			, temp2->cust_num, temp2->cust_name, temp2->gender, temp2->cust_address1, temp2->cust_address2, temp2->cust_address3, temp2->order_descp);

		temp2 = temp2->prev;
	}
	printf("press any key to continue...");
	getch();

}
void insertmid()
{
	struct node *temp3;
	temp2 = start;
	temp3 = start;

	int posi, ctr = 1, i;
	int dnum;

	if (temp2 == NULL)
	{
		printf("Empty list, please enter new record\n");
		create();
		start = temp;
		current = start;
		return;
	}

	printf("\nThe new record will be placed before the selected record of your choice. Enter a choice or type '-1' to exit\n");
	printNameList();
	printf("Choice: ");
	scanf("%d", &dnum); fflush(stdin);
	system("cls");

	if (dnum != -1)
	{
		while (ctr != total + 1) //going to next node
		{
			if (dnum == temp2->cust_num)
			{
				if ((temp2->next == NULL) && (temp2->prev == NULL))//single node
				{
					create();

					temp->next = temp2;
					temp2->prev = temp; //program crashing here..
					start = temp;
					return;
				}
				if ((temp2->next == NULL) && (temp2->prev != NULL))//for last node 
				{

					create();
					
					temp->next = temp2;
					temp->prev = temp2->prev;
					temp2->prev->next = temp;
					temp2->prev = temp;
					
					return;
				}
				if ((temp2->next != NULL) && (temp2->prev == NULL))//first node
				{

					create();
					temp->prev = temp2->prev;
					temp->next = temp2;
					temp2->prev = temp;
					start = temp;
					return;
				}

				create();
				temp->prev = temp2->prev;
				temp->next = temp2;
				temp2->prev->next = temp;
				temp2->prev = temp;
			
				return;
			}

			temp2 = temp2->next;
			ctr++;

		}
		printf("\nRecord not found!");
		printf("press any key to continue...");
		getch();
	}
}
void deleterec()
{
	int ctr = 1;
	int dnum;
	char term;
	char confirm;

	temp2 = start;

	if (temp2 == NULL)
	{
		printf("Empty list, please enter new record");
		getch();
		return;
	}

	printf("Please enter the customer number of record you wish to delete.\n");
	printNameList();
	printf("Customer Number: ");
	while (scanf("%d%c", &dnum, &term) != 2 || term != '\n')
	{
		fflush(stdin);
		printf("Error: Integer Value Only: ");
	}
	fflush(stdin);

	printf("Press Y to confirm deletion, or any other key to cancel: ");
	confirm = getch();

	if (confirm != 'y' && confirm != 'Y')
	{
		printf("Deletion aborted.");
		getch();
		return;
	}

	while (ctr != total + 1)
	{

		if (dnum == temp2->cust_num)
		{

			if (temp2->prev == NULL)//delete first node
			{
				if (temp2->next == NULL)//delete single node
				{
					free(temp2);
					temp2 = start = temp = NULL;
					total--;
					system("cls");
					printf("Last remaining node deleted. Press any key to continue.");//test
					getch();
					return;
				}

				temp2->next->prev = NULL;
				temp2 = temp2->next;

				start = temp2;
				total--;
				system("cls");
				printf("First node deleted. Press any key to continue.");//test
				getch();
				return;
			}

			if (temp2->prev != NULL)
			{
				if ((temp2->next == NULL))//delete last node
				{
					temp2->prev->next = NULL;
					temp2 = temp2->prev;
					current = temp2;
					total--;
					system("cls");
					printf("Last node in list deleted. Press any key to continue.");//test
					getch();
					return;

				}
				temp2->prev->next = temp2->next;//delete any node
				temp2->next->prev = temp2->prev;
				free(temp2);
				total--;
				system("cls");
				printf("Node deleted. Press any key to continue.");//test
				getch();
				return;
			}
		}
		temp2 = temp2->next;
		ctr++;
	}
	printf("\nRecord not found!\n\n\nPress any key to continue...");
	getch();
}
void editrec()
{
	temp2 = start;

	int posi, ctr = 1, newdat;
	int dnum;

	if (temp2 == NULL)
	{
		printf("Empty node, please enter new node\n");
		create();
		start = temp;
		current = start;
		return;
	}

	printf("\nPlease enter customer number that you wish to edit?\n ");
	printNameList();
	printf("Record's Customer Number: ");
	scanf("%d", &dnum); fflush(stdin);

	while (ctr != total + 1) //going to next node
	{
		char term;
		
		if (dnum == temp2->cust_num)
		{
			printf("New Customer Number: ");
			getValidNum();

			custNameInput();

			custGenInput();

			printf("\n Address Line 1: ");
			gets(temp2->cust_address1);
			fflush(stdin);

			printf("\n Address Line 2: ");
			gets(temp2->cust_address2);
			fflush(stdin);

			printf("\n Address Line 3: ");
			gets(temp2->cust_address3);
			fflush(stdin);

			printf("\n Description: ");
			gets(temp2->order_descp);
			fflush(stdin);

			return;
		}
		temp2 = temp2->next;
		ctr++;

	}


	printf("\nRecord not found!\n\n\nPress any key to continue...");
	getch();
}

void custNumInput()
{
	int i;
	int num;
	struct node *tempV;

	printf("\n Customer number: ");
	getValidNum();
	if (total != 0)
	{
		for (i = 0; i <= total; i++)
		{
			tempV = start;
			if (temp->cust_num == tempV->cust_num)
			{
				printf("This number already exists. Please enter a different number: ");
				i = 0;
				getValidNum();
			}
			else
			{
				tempV = tempV->next;
			}
		}
	}
}
void custNameInput()
{
	int i;

	printf("\n Name: ");
	gets(temp->cust_name); fflush(stdin);
	for (i = 0; i <= 19; i++)
	{
		if (temp->cust_name[i] == NULL)
		{
			break;
		}
		if (isalpha(temp->cust_name[i]) || temp->cust_name[i] == ' ')
		{
			//do nothing;
		}
		else
		{
			printf("Error: Alphabets Only: ");
			gets(temp->cust_name); fflush(stdin);
			i = -1;
		}
	}
}
void custGenInput()
{
	fflush(stdin);
	printf("\n Gender[Male/Female]: ");
	scanf("%s", &temp->gender); fflush(stdin);
	if (strcmp(temp->gender, "male") != 0 &&
		strcmp(temp->gender, "Male") != 0 &&
		strcmp(temp->gender, "female") != 0 &&
		strcmp(temp->gender, "Female") != 0)
	{
		while ((strcmp(temp->gender, "male") != 0 &&
			strcmp(temp->gender, "Male") != 0 &&
			strcmp(temp->gender, "female") != 0 &&
			strcmp(temp->gender, "Female") != 0))
		{
			printf("Enter a valid gender: ");
			scanf("%s", &temp->gender); fflush(stdin);
		}
	}
}
void getValidNum()
{
	char term;
	while (scanf("%d%c", &temp->cust_num, &term) != 2 || term != '\n')
	{
		fflush(stdin);
		printf("Error: Integer Value Only: ");
	}
}
void printNameList()
{
	int printCount = 1;
	struct node *tempPrint;
	tempPrint = start;
	do
	{
		printf("%d.Customer Name: %s \n Customer Number: %d \n\n", printCount, tempPrint->cust_name, tempPrint->cust_num);
		printCount++;
		tempPrint = tempPrint->next;
	} while (printCount < total + 1);
}